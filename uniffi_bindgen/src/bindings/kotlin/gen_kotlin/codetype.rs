/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

use super::{names, CodeBuilder};
use crate::codegen::NewCodeType;
use crate::interface::{ComponentInterface, Literal};

type_dispatch! {
    /// Kotlin-specific type behavior
    pub(super) trait KotlinCodeType: NewCodeType {
        /// Name for this type in Kotlin code
        fn nm(&self) -> String;

        /// Add code needed for this type, then return the code builder back.
        fn declare_code(&self, code_builder: CodeBuilder, _ci: &ComponentInterface) -> CodeBuilder {
            code_builder
        }

        fn literal(&self, _literal: &Literal) -> String {
            unreachable!();
        }

        // The expressions below cover the most common FFI conversion names.  It would be
        // really great to standardize all types to use the same method

        /// An expression for lowering a value into something we can pass over the FFI.
        ///
        /// N.B. This should align with the definition code generated by this `KotlinCodeType`.
        fn lower(&self, nm: &str) -> String {
            format!("{}.lower()", names::var_name(nm))
        }

        /// An expression for writing a value into a byte buffer.
        ///
        /// N.B. This should align with the definition code generated by this `KotlinCodeType`.
        fn write(&self, nm: &str, target: &str) -> String {
            format!("{}.write({})", names::var_name(nm), target)
        }

        /// An expression for lifting a value from something we received over the FFI.
        ///
        /// N.B. This should align with the definition code generated by this `KotlinCodeType`.
        fn lift(&self, nm: &str) -> String {
            format!("{}.lift({})", self.nm(), nm)
        }

        /// An expression for reading a value from a byte buffer.
        ///
        /// N.B. This should align with the definition code generated by this `KotlinCodeType`.
        fn read(&self, nm: &str) -> String {
            format!("{}.read({})", self.nm(), nm)
        }
   }
}
