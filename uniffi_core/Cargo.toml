[package]
name = "uniffi_core"
description = "a multi-language bindings generator for rust (runtime support code)"
documentation = "https://mozilla.github.io/uniffi-rs"
homepage = "https://mozilla.github.io/uniffi-rs"
repository = "https://github.com/mozilla/uniffi-rs"
version = "0.25.0"
authors = ["Firefox Sync Team <sync-team@mozilla.com>"]
license = "MPL-2.0"
edition = "2021"
keywords = ["ffi", "bindgen"]

[dependencies]
# Re-exported dependencies used in generated Rust scaffolding files.
anyhow = "1"
async-compat = { version = "0.2.1", optional = true }
bytes = "1.3"
camino = "1.0.8"
log = "0.4"
once_cell = "1.10.0"
# Enable "async" so that receivers implement Future, no need for "std" since we don't block on them.
oneshot = { version = "0.1", features = ["async"] }
# Regular dependencies
append-only-vec = "0.1"
paste = "1.0"
static_assertions = "1.1.0"

[dev-dependencies]
rand = "0.8"

# We want to test the slab code with loom, but don't want to introduce it as a direct dependency
# because that would cause issue with the mozilla-central Rust vendoring.  So, uncomment the `loom`
# dopendency before running the tests, then run:
#
# cargo test -p uniffi_core --release --config build.rustflags='"--cfg loom"' slab_loom_test
#
# loom = "0.7.1"

[features]
default = []
# `no_mangle` RustBuffer FFI functions
extern-rustbuffer = []

# Enable support for Tokio's futures.
# This must still be opted into on a per-function basis using `#[uniffi::export(async_runtime = "tokio")]`.
tokio = ["dep:async-compat"]
